-- local chezmoi
-- local log
--
-- --- @class NvimChezmoi
-- --- @field opts table
-- local M = {
--   opts = {
--     debug = false,
--     source_path = vim.fn.expand("~") .. "/.local/share/chezmoi",
--     target_path = vim.fn.expand("~"),
--   },
-- }
--
-- --- Set up the plugin with custom options.
-- --- @param opts? table|nil Optional options.
-- local function setup(opts):
--   M.opts = vim.tbl_deep_extend("force", M.opts, opts or {})
--
--   -- Initialize modules
--   chezmoi = require("nvim-chezmoi.commands")
--   log = require("nvim-chezmoi.core.logger").get(M.opts.debug)
--
--   -- TODO: validate if source and target path exists. If they don't, try to find with chezmoi commands.
--   -- validatePaths()
--
--   -- TODO: validate if chezmoi is in PATH
--   -- chezmoi.validate()
--
--   log:debug(
--     "nvim-chezmoi plugin initialized with options: \n" .. vim.inspect(M.opts)
--   )
--
--   -- TODO: refactor everything below
--   local augroup = function(name)
--     return vim.api.nvim_create_augroup(
--       "nvim-chezmoi_" .. name,
--       { clear = true }
--     )
--   end
--
--   vim.api.nvim_create_autocmd("BufReadPost", {
--     pattern = M.opts.source_path .. "/*",
--     group = augroup("set-source-ft"),
--     callback = function(cmd_args)
--       log:debug("set filetype for source file: " .. cmd_args.file)
--
--       chezmoi.target_path(cmd_args.file, function(callback_args)
--         vim.schedule_wrap(function(auto_cmd_args, chezmoi_callback_args)
--           local target_filepath = chezmoi_callback_args.stdout:gsub("%s+", "")
--           log:debug("got target file: " .. target_filepath)
--
--           -- Try to get filetype from target file name.
--           local target_filename = vim.fn.fnamemodify(target_filepath, ":t")
--           local filetype = vim.filetype.match({ filename = target_filename })
--
--           -- Could not determine filetype from target filename.
--           -- In this case, create temp scratch buffer
--           -- and set its the name to target file.
--           if filetype == nil or filetype == "" then
--             local tmp_buf = vim.api.nvim_create_buf(false, true)
--             vim.api.nvim_buf_set_name(tmp_buf, target_filename)
--             filetype = vim.filetype.match({ buf = tmp_buf })
--             -- Delete the temp buf after we got the filetype.
--             vim.api.nvim_buf_delete(tmp_buf, { force = true })
--           end
--
--           -- set new filetype for source file
--           log:debug(
--             "original ft: '"
--             .. vim.bo.filetype
--             .. "' | new ft: '"
--             .. filetype
--             .. "'"
--           )
--           vim.api.nvim_buf_set_option(auto_cmd_args.buf, "filetype", filetype)
--         end)(cmd_args, callback_args)
--       end)
--     end,
--   })
-- end
--
-- return {
--   setup = setup,
-- }
